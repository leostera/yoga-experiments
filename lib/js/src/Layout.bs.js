// Generated by BUCKLESCRIPT VERSION 4.0.5, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var ReasonReact = require("reason-react/lib/js/src/ReasonReact.js");
var Yoga$AsdfFlows = require("./FFI/Yoga.bs.js");
var Button$AsdfFlows = require("./Button.bs.js");
var Loader$AsdfFlows = require("./Loader.bs.js");

function button(text) {
  return /* record */[
          /* node */Yoga$AsdfFlows.Node[/* create */0](/* record */[
                /* width */100,
                /* height */100,
                /* justify_content : Space_between */3,
                /* flex_direction : Row */2,
                /* align_items : Center */2
              ]),
          /* text */text
        ];
}

var component = ReasonReact.reducerComponent("Layout");

function make(width, height, _) {
  return /* record */[
          /* debugName */component[/* debugName */0],
          /* reactClassInternal */component[/* reactClassInternal */1],
          /* handedOffState */component[/* handedOffState */2],
          /* willReceiveProps */component[/* willReceiveProps */3],
          /* didMount */component[/* didMount */4],
          /* didUpdate */component[/* didUpdate */5],
          /* willUnmount */component[/* willUnmount */6],
          /* willUpdate */component[/* willUpdate */7],
          /* shouldUpdate */component[/* shouldUpdate */8],
          /* render */(function (self) {
              return React.createElement("div", {
                          style: Yoga$AsdfFlows.project(self[/* state */1][/* root */0], { })
                        }, React.createElement("nav", {
                              style: Yoga$AsdfFlows.project(self[/* state */1][/* nav */1][/* node */0], {
                                    zIndex: "1000"
                                  })
                            }, ReasonReact.element(undefined, undefined, Button$AsdfFlows.make(self[/* state */1][/* nav */1][/* buttons */1][/* reset */0][/* node */0], /* Secondary */1, (function () {
                                        return Curry._1(self[/* send */3], /* Reset */2);
                                      }), /* array */[self[/* state */1][/* nav */1][/* buttons */1][/* reset */0][/* text */1]])), ReasonReact.element(undefined, undefined, Button$AsdfFlows.make(self[/* state */1][/* nav */1][/* buttons */1][/* continue */1][/* node */0], /* Primary */0, (function () {
                                        return Curry._1(self[/* send */3], /* Continue */0);
                                      }), /* array */[self[/* state */1][/* nav */1][/* buttons */1][/* continue */1][/* text */1]])), ReasonReact.element(undefined, undefined, Button$AsdfFlows.make(self[/* state */1][/* nav */1][/* buttons */1][/* fail */2][/* node */0], /* Danger */2, (function () {
                                        return Curry._1(self[/* send */3], /* Fail */1);
                                      }), /* array */[self[/* state */1][/* nav */1][/* buttons */1][/* fail */2][/* text */1]]))), ReasonReact.element(undefined, undefined, Loader$AsdfFlows.make(width, height, self[/* state */1][/* phase */2], /* array */[React.createElement("div", undefined, "Yo! This is some stuff")])));
            }),
          /* initialState */(function () {
              var buttons_000 = /* reset */button("Reset");
              var buttons_001 = /* continue */button("Continue");
              var buttons_002 = /* fail */button("Error");
              var buttons = /* record */[
                buttons_000,
                buttons_001,
                buttons_002
              ];
              var nav_000 = /* node */Yoga$AsdfFlows.Node[/* insertChild */1](buttons_002[/* node */0], 2, Yoga$AsdfFlows.Node[/* insertChild */1](buttons_001[/* node */0], 1, Yoga$AsdfFlows.Node[/* insertChild */1](buttons_000[/* node */0], 0, Yoga$AsdfFlows.Node[/* create */0](/* record */[
                                /* width */width,
                                /* height */100,
                                /* justify_content : Space_evenly */5,
                                /* flex_direction : Row */2,
                                /* align_items : Center */2
                              ]))));
              var nav = /* record */[
                nav_000,
                /* buttons */buttons
              ];
              return /* record */[
                      /* root */Yoga$AsdfFlows.Node[/* calculateLayout */2](/* record */[
                            /* width */window.visualViewport.width,
                            /* height */window.visualViewport.height,
                            /* direction : Left_to_right */1
                          ], Yoga$AsdfFlows.Node[/* insertChild */1](nav_000, 0, Yoga$AsdfFlows.Node[/* create */0](/* record */[
                                    /* width */width,
                                    /* height */height,
                                    /* justify_content : Flex_start */0,
                                    /* flex_direction : Column */0,
                                    /* align_items : Flex_start */1
                                  ]))),
                      /* nav */nav,
                      /* phase : Loading */0
                    ];
            }),
          /* retainedProps */component[/* retainedProps */11],
          /* reducer */(function (action, state) {
              switch (action) {
                case 0 : 
                    return /* Update */Block.__(0, [/* record */[
                                /* root */state[/* root */0],
                                /* nav */state[/* nav */1],
                                /* phase : Ok */2
                              ]]);
                case 1 : 
                    return /* Update */Block.__(0, [/* record */[
                                /* root */state[/* root */0],
                                /* nav */state[/* nav */1],
                                /* phase : Error */1
                              ]]);
                case 2 : 
                    return /* Update */Block.__(0, [/* record */[
                                /* root */state[/* root */0],
                                /* nav */state[/* nav */1],
                                /* phase : Loading */0
                              ]]);
                
              }
            }),
          /* jsElementWrapped */component[/* jsElementWrapped */13]
        ];
}

var Style = 0;

exports.Style = Style;
exports.button = button;
exports.component = component;
exports.make = make;
/* component Not a pure module */
